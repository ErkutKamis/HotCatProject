// <auto-generated />
using System;
using HC.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HC.Infrastructure.Migrations
{
    [DbContext(typeof(HC_DbContext))]
    partial class HC_DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HC.Domain.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HC.Domain.Concrete.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("1c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CategoryName = "East Asian",
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 930, DateTimeKind.Local).AddTicks(9597),
                            Description = "Asian food is good",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("2c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CategoryName = "Turkish",
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 930, DateTimeKind.Local).AddTicks(9642),
                            Description = "Turkish food is good",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("3c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CategoryName = "Global",
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 930, DateTimeKind.Local).AddTicks(9648),
                            Description = "Global food is good",
                            Status = 1
                        });
                });

            modelBuilder.Entity("HC.Domain.Concrete.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = new Guid("1d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(159),
                            DepartmentName = "General management",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("2d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(166),
                            DepartmentName = "Purchase management",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("3d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(169),
                            DepartmentName = "Personal management",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("4d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(172),
                            DepartmentName = "Sales management",
                            Status = 1
                        });
                });

            modelBuilder.Entity("HC.Domain.Concrete.Employee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = new Guid("62fc5bc4-ab5b-48c1-b6d3-bd11ff7309c5"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(296),
                            DepartmentID = new Guid("1d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            FirstName = "Bahadır",
                            LastName = "Arda",
                            Status = 1,
                            Title = "Mr."
                        },
                        new
                        {
                            ID = new Guid("6bd06e0f-8167-4d69-ab64-c5168b3fc3bd"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(330),
                            DepartmentID = new Guid("2d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            FirstName = "Erkut",
                            LastName = "Kamış",
                            Status = 1,
                            Title = "Mr."
                        },
                        new
                        {
                            ID = new Guid("bffbe0dc-8d92-46b9-b526-705cc39741ff"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(334),
                            DepartmentID = new Guid("3d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            FirstName = "Çağrı",
                            LastName = "Yolyapar",
                            Status = 1,
                            Title = "Mr."
                        },
                        new
                        {
                            ID = new Guid("4c7b4958-9f01-4b1f-974e-6143863c0295"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(338),
                            DepartmentID = new Guid("4d42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            FirstName = "Fatih",
                            LastName = "Günalp",
                            Status = 1,
                            Title = "Mr."
                        });
                });

            modelBuilder.Entity("HC.Domain.Concrete.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HC.Domain.Concrete.OrderDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("UnitInStock")
                        .HasColumnType("smallint");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = new Guid("1dd2e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CategoryID = new Guid("1c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 930, DateTimeKind.Local).AddTicks(9960),
                            Description = "Maki sushi is a sushi roll with the seaweed.",
                            ProductName = "Maki Sushi",
                            Status = 1,
                            UnitInStock = (short)250,
                            UnitPrice = 10.99m
                        },
                        new
                        {
                            ID = new Guid("0a35483e-de5d-43f6-8c6f-11b0705b827b"),
                            CategoryID = new Guid("1c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 930, DateTimeKind.Local).AddTicks(9973),
                            Description = "Boiling vegetables, serving with special hot sauce",
                            ProductName = "Maki Hoso",
                            Status = 1,
                            UnitInStock = (short)300,
                            UnitPrice = 8.99m
                        },
                        new
                        {
                            ID = new Guid("7d3c3b95-d406-457c-9d6d-8bee694b12c3"),
                            CategoryID = new Guid("2c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(13),
                            Description = "A sushi roll filled with crab meat, avocado, and cucumber.",
                            ProductName = "California Roll",
                            Status = 1,
                            UnitInStock = (short)200,
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            ID = new Guid("ef5ebf7a-4744-424c-87d8-ec29bee1e889"),
                            CategoryID = new Guid("2c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(18),
                            Description = "Thin slices of raw fish served over a small ball of sushi rice.",
                            ProductName = "Nigiri Sushi",
                            Status = 1,
                            UnitInStock = (short)150,
                            UnitPrice = 15.99m
                        },
                        new
                        {
                            ID = new Guid("b24f3e65-2323-4ab0-bd16-2d724ced2b34"),
                            CategoryID = new Guid("3c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(23),
                            Description = "Japanese wheat noodle soup with a variety of toppings, such as sliced pork, dried seaweed, and green onions.",
                            ProductName = "Ramen Noodle Soup",
                            Status = 1,
                            UnitInStock = (short)250,
                            UnitPrice = 11.99m
                        },
                        new
                        {
                            ID = new Guid("25a47dfe-e9d3-4509-af14-e4e86f8bcf26"),
                            CategoryID = new Guid("3c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(27),
                            Description = "Japanese wheat noodle soup with a variety of toppings, such as tempura, seafood, and eggs.",
                            ProductName = "Udon Noodle Soup",
                            Status = 1,
                            UnitInStock = (short)200,
                            UnitPrice = 13.99m
                        },
                        new
                        {
                            ID = new Guid("ac973c2e-a8d7-49d0-a241-17c00d0afde0"),
                            CategoryID = new Guid("3c42e49b-9c8d-4d44-a508-eb12a50c28d8"),
                            CreatedDate = new DateTime(2023, 2, 21, 23, 14, 16, 931, DateTimeKind.Local).AddTicks(30),
                            Description = "Deep-fried seafood and vegetables, served with a special dipping sauce.",
                            ProductName = "Tempura",
                            Status = 1,
                            UnitInStock = (short)175,
                            UnitPrice = 14.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HC.Domain.Concrete.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Employee", b =>
                {
                    b.HasOne("HC.Domain.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Order", b =>
                {
                    b.HasOne("HC.Domain.Concrete.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HC.Domain.Concrete.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HC.Domain.Concrete.OrderDetail", b =>
                {
                    b.HasOne("HC.Domain.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HC.Domain.Concrete.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Product", b =>
                {
                    b.HasOne("HC.Domain.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HC.Domain.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HC.Domain.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HC.Domain.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HC.Domain.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HC.Domain.Concrete.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("HC.Domain.Concrete.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
